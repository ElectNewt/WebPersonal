@using WebPersonal.Shared.Dto;
@using System.Text.Json;
@using WebPersonal.Shared.ROP;
@inject IHttpClientFactory ClientFactory
@if (PersonalProfile != null)
{
    <div>
        <div class="row">
            <div class="col-sm-12 text-center">@PersonalProfile.FirstName @PersonalProfile.LastName</div>
        </div>
    </div>

    <h3>Perfil Personal</h3>
    <div class="row">
        <div class="col-sm-12">
            @PersonalProfile.Description
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            <b>Teléfono:</b> @PersonalProfile.Phone
        </div>
        <div class="col-sm-3">
            <b>Email:</b> @PersonalProfile.Email
        </div>
        <div class="col-sm-3">
            <b>GitHub:</b> @PersonalProfile.GitHub
        </div>
        <div class="col-sm-3">
            <b>Página web:</b> <a href="@PersonalProfile.Website">@PersonalProfile.Website</a>
        </div>
    </div>
}
@*Todo: build something to print the erros per component*@

@code {

    [Parameter]
    public string Profile { get; set; }

    public PersonalProfileDto PersonalProfile { get; set; }

    public List<ErrorDto> Erros { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await GetPersonalProfile(Profile);
        if (result.Success)
            PersonalProfile = result.Value;
        else
            Erros = result.Errors;
    }

    private async Task<ResultDto<PersonalProfileDto>> GetPersonalProfile(string profileCode)
    {
        var client = ClientFactory.CreateClient("BackendApi");
        return await client.GetFromJsonAsync<ResultDto<PersonalProfileDto>>($"api/perfilpersonal/{profileCode}", new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
    }

}
